---
import CustomButton from "@/components/CustomButton.astro";
import NavDropDown from "@/components/functional-component/NavDropDown";
import Logo from "@/components/Logo.astro";
import config from "@/config/config.json";
import menu from "@/config/menu.json";
import DynamicIcon from "@/helpers/DynamicIcon";
import { markdownify } from "@/lib/utils/textConverter";

export interface ChildNavigationLink {
  name: string;
  url: string;
}

export interface NavigationLink {
  name: string;
  url: string;
  hasChildren?: boolean;
  children?: ChildNavigationLink[];
}

const { main }: { main: NavigationLink[] } = menu;
const { navigation_button, notification } = config;
const { pathname } = Astro.url;
---

<div
  class="absolute top-0 z-20 flex flex-col sm:flex-row justify-center items-center gap-4.5 w-full bg-primary py-2"
  data-aos="fade-down-sm">
  <p
    class="text-text-light/80 text-base-sm"
    set:html={markdownify(notification.message)}
  />

  <a href={notification.link} class="text-text-light flex items-center">
    <DynamicIcon icon={notification.icon} className="mr-2.5" />
    {notification.label}
  </a>
</div>

<header class="header z-50 absolute top-26 sm:top-12">
  <nav class="navbar mx-auto max-w-[1356px]! px-[30px]">
    <!-- logo -->
    <div class="order-0" data-aos="zoom-in" data-aos-delay="20">
      <Logo />
    </div>
    <div class="flex items-center gap-4.5">
      {
        navigation_button.enable && (
          <CustomButton
            link={navigation_button.link}
            label={navigation_button.label}
            type="btn-sm"
            className="order-1 hidden lg:hidden! sm:inline-block"
            data_aos="zoom-in-sm"
          />
        )
      }

      <!-- navbar toggler -->
      <input id="nav-toggle" type="checkbox" class="hidden" />
      <label
        for="nav-toggle"
        class="order-3 cursor-pointer flex items-center lg:hidden text-text lg:order-1 bg-primary p-2 rounded">
        <svg
          id="show-button"
          class="h-5 fill-text-light block"
          viewBox="0 0 20 20">
          <title>Menu Open</title>
          <path d="M0 3h20v2H0V3z m0 6h20v2H0V9z m0 6h20v2H0V0z"></path>
        </svg>
        <svg
          id="hide-button"
          class="h-5 fill-text-light hidden"
          viewBox="0 0 20 20">
          <title>Menu Close</title>
          <polygon
            points="11 9 22 9 22 11 11 11 11 22 9 22 9 11 -2 11 -2 9 9 9 9 -2 11 -2"
            transform="rotate(45 10 10)"></polygon>
        </svg>
      </label>

      <!-- /navbar toggler -->
      <ul id="nav-menu" class="navbar-nav">
        {
          main.map((menu, i: number) => (
            <>
              {menu.hasChildren ? (
                <NavDropDown menu={menu} pathname={pathname} client:load />
              ) : (
                <li
                  class="nav-item"
                  data-aos="fade-up-sm"
                  data-aos-delay={100 + i * 50}>
                  <a
                    href={menu.url}
                    class={`nav-link text-base-sm ${(pathname === `${menu.url}/` || pathname === menu.url) && "active"}`}>
                    {menu.name}
                  </a>
                </li>
              )}
            </>
          ))
        }
      </ul>
    </div>
    {
      navigation_button.enable && (
        <CustomButton
          link={navigation_button.link}
          label={navigation_button.label}
          type="btn-sm"
          className="order-1 hidden lg:inline-block!"
          data_aos="zoom-in-sm"
        />
      )
    }
  </nav>
</header>
